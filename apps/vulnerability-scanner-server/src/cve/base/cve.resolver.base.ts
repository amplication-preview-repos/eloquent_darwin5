/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cve } from "./Cve";
import { CveCountArgs } from "./CveCountArgs";
import { CveFindManyArgs } from "./CveFindManyArgs";
import { CveFindUniqueArgs } from "./CveFindUniqueArgs";
import { DeleteCveArgs } from "./DeleteCveArgs";
import { CveService } from "../cve.service";
@graphql.Resolver(() => Cve)
export class CveResolverBase {
  constructor(protected readonly service: CveService) {}

  async _cvesMeta(
    @graphql.Args() args: CveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cve])
  async cves(@graphql.Args() args: CveFindManyArgs): Promise<Cve[]> {
    return this.service.cves(args);
  }

  @graphql.Query(() => Cve, { nullable: true })
  async cve(@graphql.Args() args: CveFindUniqueArgs): Promise<Cve | null> {
    const result = await this.service.cve(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cve)
  async deleteCve(@graphql.Args() args: DeleteCveArgs): Promise<Cve | null> {
    try {
      return await this.service.deleteCve(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
