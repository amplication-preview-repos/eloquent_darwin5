/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CveService } from "../cve.service";
import { CveCreateInput } from "./CveCreateInput";
import { Cve } from "./Cve";
import { CveFindManyArgs } from "./CveFindManyArgs";
import { CveWhereUniqueInput } from "./CveWhereUniqueInput";
import { CveUpdateInput } from "./CveUpdateInput";

export class CveControllerBase {
  constructor(protected readonly service: CveService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cve })
  async createCve(@common.Body() data: CveCreateInput): Promise<Cve> {
    return await this.service.createCve({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cve] })
  @ApiNestedQuery(CveFindManyArgs)
  async cves(@common.Req() request: Request): Promise<Cve[]> {
    const args = plainToClass(CveFindManyArgs, request.query);
    return this.service.cves({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cve })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cve(@common.Param() params: CveWhereUniqueInput): Promise<Cve | null> {
    const result = await this.service.cve({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cve })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCve(
    @common.Param() params: CveWhereUniqueInput,
    @common.Body() data: CveUpdateInput
  ): Promise<Cve | null> {
    try {
      return await this.service.updateCve({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cve })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCve(
    @common.Param() params: CveWhereUniqueInput
  ): Promise<Cve | null> {
    try {
      return await this.service.deleteCve({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
