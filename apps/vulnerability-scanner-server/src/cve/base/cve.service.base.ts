/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cve as PrismaCve } from "@prisma/client";

export class CveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CveCountArgs, "select">): Promise<number> {
    return this.prisma.cve.count(args);
  }

  async cves(args: Prisma.CveFindManyArgs): Promise<PrismaCve[]> {
    return this.prisma.cve.findMany(args);
  }
  async cve(args: Prisma.CveFindUniqueArgs): Promise<PrismaCve | null> {
    return this.prisma.cve.findUnique(args);
  }
  async createCve(args: Prisma.CveCreateArgs): Promise<PrismaCve> {
    return this.prisma.cve.create(args);
  }
  async updateCve(args: Prisma.CveUpdateArgs): Promise<PrismaCve> {
    return this.prisma.cve.update(args);
  }
  async deleteCve(args: Prisma.CveDeleteArgs): Promise<PrismaCve> {
    return this.prisma.cve.delete(args);
  }
}
